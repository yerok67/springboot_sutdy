package service;

import java.io.File;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.checkerframework.checker.units.qual.s;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import dao.ItemDao;
import dao.SaleDao;
import dao.SaleItemDao;
import logic.Cart;
import logic.Item;
import logic.ItemSet;
import logic.Sale;
import logic.SaleItem;
import logic.User;

@Service // @Component + Service : 객체화 + 서비스기능
public class ShopService {
	@Autowired // ItemDao 객체를 주입
	private ItemDao itemDao;
	@Autowired
	private SaleDao saleDao;
	@Autowired
	private SaleItemDao saleItemDao;

	public List<Item> itemList() {
		return itemDao.list();
	}

	public Item getItem(Integer id) {
		return itemDao.select(id);
	}

	public void itemCreate(Item item, HttpServletRequest request) {
		// item.getPicture() : 업로드된 파일이 존재. 파일의 내용 저장
		if (item.getPicture() != null && !item.getPicture().isEmpty()) {
			// 업로드 폴더 지정
			String path = request.getServletContext().getRealPath("/") + "img/";
			uploadFileCreate(item.getPicture(), path);
			item.setPictureUrl(item.getPicture().getOriginalFilename());
		}
		int maxid = itemDao.maxId(); // db에서 id의 최대값 조회
		item.setId(maxid + 1); //
		itemDao.insert(item);
	}

	// 파일 업로드하기
	private void uploadFileCreate(MultipartFile picture, String path) {
		String orgFile = picture.getOriginalFilename(); // 원본 파일 이름
		File f = new File(path);
		if (!f.exists())
			f.mkdirs(); // 폴더가 없으면 생성
		try {
			// picture : 파일의 내용
			// transferTo : pipcture의 내용을 new File의 위치로 저장
			picture.transferTo(new File(path + orgFile));
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void itemUpdate(Item item, HttpServletRequest request) {
		if (item.getPicture() != null && !item.getPicture().isEmpty()) {
			String path = request.getServletContext().getRealPath("/") + "img/";
			uploadFileCreate(item.getPicture(), path);
			item.setPictureUrl(item.getPicture().getOriginalFilename());
		}
		itemDao.update(item);
	}

	public void itemDelete(Integer id) {
		itemDao.delete(id);
	}

	public Sale checkend(User loginUser, Cart cart) {
		int maxsaleid = saleDao.getMaxSaleId(); // 최종 주문번호 조회
		Sale sale = new Sale();
		sale.setSaleid(maxsaleid + 1); // 최종 주문 번호 + 1
		sale.setUser(loginUser); // 주문자 정보
		sale.setUserid(loginUser.getUserid()); // db의 userid값으로 저장
		saleDao.insert(sale); // sale 테이블에 추가
		int seq = 0;
		// ItemSet : Item 객체, 수량
		for (ItemSet is : cart.getItemSetList()) {
			// slae.getSaleid() : 주문번호
			// ++seq : 주문상품 번호
			SaleItem saleItem = new SaleItem(sale.getSaleid(), ++seq, is);
			sale.getItemList().add(saleItem);
			saleItemDao.insert(saleItem);
		}
		return sale;
	}

	public List<Sale> saleList(String userid) {
		List<Sale> list = saleDao.list(userid);
		for (Sale sa : list) {
			List<SaleItem> saleItemList = saleItemDao.list(sa.getSaleid());
			for (SaleItem si : saleItemList) {
				Item item = itemDao.select(si.getItemid());
				si.setItem(item);
			}
			sa.setItemList(saleItemList);
		}
		return list;
	}
}
