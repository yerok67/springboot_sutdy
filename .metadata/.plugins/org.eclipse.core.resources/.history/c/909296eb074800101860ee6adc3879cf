package kr.gdu.controller;

import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpSession;
import jakarta.validation.Valid;
import kr.gdu.logic.Board;
import kr.gdu.service.BoardService;

@Controller
@RequestMapping("board")
public class BoardController {
	@Autowired
	private BoardService service;
	
	@GetMapping("*")
	public ModelAndView write() {
		ModelAndView mav = new ModelAndView();
		mav.addObject(new Board());
		return mav;
	}
	/* Spring에서 파라미터 전달 방식
	 *   1. 파라미터 이름과 매개변수 이름이 같은 경우 매핑
	 *   2. Bean 클래스의 프로퍼티명과 파라미터 이름이 같은 경우 매핑
	 *   3. Map 객체에 RequestParam 어노테이션을 이용한 매핑 
	 * 
	 * @RequestParam : 파라미터값을 Map 객체에 매핑하여 전달
	 * 
	 */
	@RequestMapping("list")
	public ModelAndView list(@RequestParam Map<String, String> param, HttpSession session) {
		Integer pageNum  = null;
		for(String key : param.keySet()) {
			if(param.get(key) == null || param.get(key).trim().equals("")) {
				param.put(key, null);
			}
		}
		if(param.get("pageNum") != null) {
			pageNum = Integer.parseInt(param.get("pageNum"));
		} else {
			pageNum = 1;
		}
		String boardid = param.get("boardid");
		String searchtype = param.get("searchtype");
		String searchcontent = param.get("searchcontent");
		if (boardid == null) {
		    boardid = "1"; // 기본값 예시: 공지사항
		}
		ModelAndView mav = new ModelAndView();
		String boardName = null;
		switch (boardid) {
		case "1": boardName = "공지사항";break;
		case "2": boardName = "자유게시판";break;
		case "3": boardName = "QNA";break;
		}
		
		// 게시판 조회 처리
		int limit = 10; // 한 페이지 출력될 게시물 건수
		// listcount : boardid 별 전체 게시물 건수.
		int listcount = service.boardcount(boardid,searchtype, searchcontent);
		// boardlist : 해당 페이지 출력될 게시물 목록
		List<Board> boardlist = service.boardlist(pageNum, limit, boardid, searchtype, searchcontent);
		// 페이징 처리를 위한 변수
		// 게시물 건수에 따른 최대 페이지값
		int maxpage = (int)((double)listcount/limit + 0.95);
		// startpage : 현재 화면에 보여질 시작 페이지 값
		int startpage = (int) ((pageNum/10.0 + 0.9) - 1) * 10 + 1;
		// endpage : 현재 화면에 보여질 마지막 페이지 값
		int endpage = startpage + 9;
		// 마지막 페이지 값을 최대 페이지 보다 클 수 없다
		if(endpage > maxpage) {
			endpage = maxpage;
		}
		// 화면에 보여질 게시물 번호
		int boardno = listcount - (pageNum - 1) * limit;
		mav.addObject("Whitelabel Error Page\r\n"
				+ "This application has no explicit mapping for /error, so you are seeing this as a fallback.\r\n"
				+ "\r\n"
				+ "Fri Jun 13 12:37:31 KST 2025\r\n"
				+ "There was an unexpected error (type=Internal Server Error, status=500).\r\n"
				+ "Property [fileurl] not found on type [java.lang.String]\r\n"
				+ "jakarta.el.PropertyNotFoundException: Property [fileurl] not found on type [java.lang.String]\r\n"
				+ "	at jakarta.el.BeanELResolver$BeanProperties.get(BeanELResolver.java:261)\r\n"
				+ "	at jakarta.el.BeanELResolver.property(BeanELResolver.java:330)\r\n"
				+ "	at jakarta.el.BeanELResolver.getValue(BeanELResolver.java:99)\r\n"
				+ "	at org.apache.jasper.el.JasperELResolver.getValue(JasperELResolver.java:128)\r\n"
				+ "	at org.apache.el.parser.AstValue.getValue(AstValue.java:164)\r\n"
				+ "	at org.apache.el.parser.AstAbstractEmpty.getValue(AstAbstractEmpty.java:54)\r\n"
				+ "	at org.apache.el.ValueExpressionImpl.getValue(ValueExpressionImpl.java:152)\r\n"
				+ "	at org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate(PageContextImpl.java:674)\r\n"
				+ "	at org.apache.jsp.WEB_002dINF.views.board.list_jsp._jspx_meth_c_005fif_005f1(list_jsp.java:413)\r\n"
				+ "	at org.apache.jsp.WEB_002dINF.views.board.list_jsp._jspx_meth_c_005fforEach_005f0(list_jsp.java:329)\r\n"
				+ "	at org.apache.jsp.WEB_002dINF.views.board.list_jsp._jspx_meth_c_005fif_005f0(list_jsp.java:266)\r\n"
				+ "	at org.apache.jsp.WEB_002dINF.views.board.list_jsp._jspService(list_jsp.java:202)\r\n"
				+ "	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:64)\r\n"
				+ "	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)\r\n"
				+ "	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:436)\r\n"
				+ "	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:357)\r\n"
				+ "	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:308)\r\n"
				+ "	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)\r\n"
				+ "	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)\r\n"
				+ "	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\r\n"
				+ "	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)\r\n"
				+ "	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\r\n"
				+ "	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\r\n"
				+ "	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)\r\n"
				+ "	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\r\n"
				+ "	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\r\n"
				+ "	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)\r\n"
				+ "	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\r\n"
				+ "	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\r\n"
				+ "	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)\r\n"
				+ "	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\r\n"
				+ "	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\r\n"
				+ "	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:612)\r\n"
				+ "	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:394)\r\n"
				+ "	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:323)\r\n"
				+ "	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:268)\r\n"
				+ "	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:171)\r\n"
				+ "	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:314)\r\n"
				+ "	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1437)\r\n"
				+ "	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1168)\r\n"
				+ "	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1106)\r\n"
				+ "	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)\r\n"
				+ "	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)\r\n"
				+ "	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)\r\n"
				+ "	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)\r\n"
				+ "	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)\r\n"
				+ "	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)\r\n"
				+ "	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)\r\n"
				+ "	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\r\n"
				+ "	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)\r\n"
				+ "	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\r\n"
				+ "	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\r\n"
				+ "	at org.sitemesh.webapp.contentfilter.ContentBufferingFilter.doFilter(ContentBufferingFilter.java:112)\r\n"
				+ "	at org.sitemesh.webapp.SiteMeshFilter.doFilter(SiteMeshFilter.java:126)\r\n"
				+ "	at org.sitemesh.config.ConfigurableSiteMeshFilter.doFilter(ConfigurableSiteMeshFilter.java:171)\r\n"
				+ "	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\r\n"
				+ "	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\r\n"
				+ "	at org.sitemesh.webapp.contentfilter.ContentBufferingFilter.bufferAndPostProcess(ContentBufferingFilter.java:169)\r\n"
				+ "	at org.sitemesh.webapp.contentfilter.ContentBufferingFilter.doFilter(ContentBufferingFilter.java:126)\r\n"
				+ "	at org.sitemesh.webapp.SiteMeshFilter.doFilter(SiteMeshFilter.java:126)\r\n"
				+ "	at org.sitemesh.config.ConfigurableSiteMeshFilter.doFilter(ConfigurableSiteMeshFilter.java:171)\r\n"
				+ "	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\r\n"
				+ "	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\r\n"
				+ "	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\r\n"
				+ "	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\r\n"
				+ "	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\r\n"
				+ "	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\r\n"
				+ "	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\r\n"
				+ "	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\r\n"
				+ "	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\r\n"
				+ "	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\r\n"
				+ "	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\r\n"
				+ "	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\r\n"
				+ "	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)\r\n"
				+ "	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)\r\n"
				+ "	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)\r\n"
				+ "	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)\r\n"
				+ "	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)\r\n"
				+ "	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)\r\n"
				+ "	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)\r\n"
				+ "	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)\r\n"
				+ "	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)\r\n"
				+ "	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)\r\n"
				+ "	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)\r\n"
				+ "	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)\r\n"
				+ "	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)\r\n"
				+ "	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)\r\n"
				+ "	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)\r\n"
				+ "	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)\r\n"
				+ "	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)\r\n"
				+ "	at java.base/java.lang.Thread.run(Thread.java:1583)", boardid);
		mav.addObject("boardName", boardName);
		mav.addObject("pageNum", pageNum);
		mav.addObject("maxpage", maxpage);
		mav.addObject("startpage", startpage);
		mav.addObject("endpage", endpage);
		mav.addObject("listcount", listcount);
		mav.addObject("boardlist", boardlist);
		mav.addObject("boardno", boardno);
		return mav;
	}
	@GetMapping("detail")
	public ModelAndView detail(Integer num, HttpSession session) {
		ModelAndView mav = new ModelAndView();
		Board board = service.getBoard(num);
		service.addReadcnt(num);
		if(board.getBoardid() == null || board.getBoardid().equals("1"))
		    mav.addObject("boardName", "공지사항");
		else if(board.getBoardid().equals("2"))
		    mav.addObject("boardName", "자유게시판");
		else if(board.getBoardid().equals("3"))
		    mav.addObject("boardName", "QNA");
		mav.addObject("board",board);
		return mav;
	}
	@PostMapping("write")
	public ModelAndView writePost(@Valid Board board, BindingResult bresult, HttpServletRequest request) {
		ModelAndView mav = new ModelAndView();
		if(bresult.hasErrors()) {
			return mav;
		}
		if(board.getBoardid() == null) board.setBoardid("1");
		service.boardWrite(board, request);
		mav.setViewName("redirect:list?boardid=" + board.getBoardid());
		return mav;
	}
}
